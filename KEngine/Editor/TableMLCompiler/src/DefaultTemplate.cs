
namespace TableML.Compiler
{

	/// <summary>
	/// Default template, for Unity + KEngine
	/// </summary>
	public class DefaultTemplate
	{
		public static string GenCodeTemplate = @"
#region Copyright (c) 2015 KEngine / Kelly <http://github.com/mr-kelly>, All rights reserved.

// KEngine - Asset Bundle framework for Unity3D
// ===================================
// 
// Author:  Kelly
// Email: 23110388@qq.com
// Github: https://github.com/mr-kelly/KEngine
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.

#endregion

// This file is auto generated by TemplateModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using KEngine;
using KEngine.Modules;
using TableML;
//namespace {{ NameSpace }}
//{
	/// <summary>
    /// All templates list here, so you can reload all templates manully from the list.
	/// </summary>
    public partial class TemplatesManager
    {
        private static IReloadableTemplates[] _templatesList;
        public static IReloadableTemplates[] TemplatesList
        {
            get
            {
                if (_templatesList == null)
                {
                    _templatesList = new IReloadableTemplates[]
                    { {% for file in Files %}
                        {{ file.ClassName }}Database._instance,{% endfor %}
                    };
                }
                return _templatesList;
            }
        }

#if UNITY_EDITOR
        [UnityEditor.MenuItem(""KEngine/模板/重新加载所有模板"")]
#endif
	    public static void AllTemplatesReload()
	    {
	        for (var i = 0; i < TemplatesList.Length; i++)
	        {
	            var templates = TemplatesList[i];
                if (templates.Count > 0 // if never reload, ignore
#if UNITY_EDITOR
                    || !UnityEditor.EditorApplication.isPlaying // in editor and not playing, force load!
#endif
                    )
                {
                    templates.ReloadAll();
                }

	        }
	    }

    }

{% for file in Files %}
	/// <summary>
	/// Auto Generate for Tab File: {{ file.TabFilePaths }}
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class {{file.ClassName}}Database : IReloadableTemplates
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            {{ file.TabFilePaths }}
        };
        internal static {{file.ClassName}}Database _instance = new {{file.ClassName}}Database();
        Dictionary<{{ file.PrimaryKeyField.FormatType }}, {{file.ClassName}}Template> _dict = new Dictionary<{{ file.PrimaryKeyField.FormatType }}, {{file.ClassName}}Template>();

        /// <summary>
        /// Trigger delegate when reload the Templates
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private {{file.ClassName}}Database()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static {{file.ClassName}}Database GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (TemplateModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        TemplateModule.WatchTemplate(tabFilePath, (path) =>
                        {
                            if (path.Replace(""\\"", ""/"").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread(""File Watcher! Reload success! -> "" + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the template file: {{ file.ClassName }}, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the template class : {{ file.ClassName }}, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the template file: {{ file.ClassName }}
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = TemplateModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = {{ file.ClassName }}Template.ParsePrimaryKey(row);
                        {{file.ClassName}}Template template;
                        if (!_dict.TryGetValue(pk, out template))
                        {
                            template = new {{file.ClassName}}Template(row);
                            _dict[pk] = template;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format(""DuplicateKey, Class: {0}, File: {1}, Key: {2}"", this.GetType().Name, tabFilePath, pk));
                            else template.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info(""Reload templates: {0}, Row Count: {1}, Reload Count: {2}"", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: {{ file.ClassName }}
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row.Init();
            }
        }
         
	    /// <summary>
        /// Get class by primary key: {{ file.ClassName }}
        /// </summary>
        public static {{file.ClassName}}Template Get({{ file.PrimaryKeyField.FormatType }} primaryKey)
        {
            {{file.ClassName}}Template template;
            if (GetInstance()._dict.TryGetValue(primaryKey, out template)) return template.Init();
            return null;
        }

        // ========= CustomExtraString begin ===========
        {% if file.Extra %}{{ file.Extra }}{% endif %}
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: {{ file.TabFilePaths }}
    /// Singleton class for less memory use
	/// </summary>
	public partial class {{file.ClassName}}Template : TableRowFieldParser
	{
		{% for field in file.Fields %}
        /// <summary>
        /// {{ field.Comment }}
        /// </summary>
        public {{ field.FormatType }} {{ field.Name}} { get; private set;}
        {% endfor %}

		// 临时保存, 用到的时候再去解析
		private TableFileRow _tempRow;

        internal {{file.ClassName}}Template(TableFileRow row)
        {
            _tempRow = row;
        }

		internal {{file.ClassName}}Template Init() {
			if (_tempRow != null) {
                var row = _tempRow;
                _tempRow = null;
				Reload(row);
			}
            return this;
		}

        internal void Reload(TableFileRow row)
        { 
            if (_tempRow != null) {
                _tempRow = row;
                return;
            }
         {% for field in file.Fields %}
            {{ field.Name}} = row.Get_{{ field.TypeMethod }}(row.Values[{{ field.Index }}], ""{{ field.DefaultValue }}""); {% endfor %}
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name=""row""></param>
        /// <returns></returns>
        public static {{ file.PrimaryKeyField.FormatType }} ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_{{ file.PrimaryKeyField.TypeMethod }}(row.Values[{{ file.PrimaryKeyField.Index }}], ""{{ file.PrimaryKeyField.DefaultValue }}"");
            return primaryKey;
        }
	}
{% endfor %} 
//}
";
	}
}
